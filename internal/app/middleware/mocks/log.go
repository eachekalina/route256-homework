// Code generated by MockGen. DO NOT EDIT.
// Source: ./log.go
//
// Generated by this command:
//
//	mockgen -source=./log.go -destination=./mocks/log.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reqlog "homework/internal/app/reqlog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRequestLogger is a mock of RequestLogger interface.
type MockRequestLogger struct {
	ctrl     *gomock.Controller
	recorder *MockRequestLoggerMockRecorder
}

// MockRequestLoggerMockRecorder is the mock recorder for MockRequestLogger.
type MockRequestLoggerMockRecorder struct {
	mock *MockRequestLogger
}

// NewMockRequestLogger creates a new mock instance.
func NewMockRequestLogger(ctrl *gomock.Controller) *MockRequestLogger {
	mock := &MockRequestLogger{ctrl: ctrl}
	mock.recorder = &MockRequestLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestLogger) EXPECT() *MockRequestLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockRequestLogger) Log(msg reqlog.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", msg)
}

// Log indicates an expected call of Log.
func (mr *MockRequestLoggerMockRecorder) Log(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRequestLogger)(nil).Log), msg)
}
