// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pickuppoint.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PickUpPointServiceClient is the client API for PickUpPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PickUpPointServiceClient interface {
	Create(ctx context.Context, in *PickUpPointCreateRequest, opts ...grpc.CallOption) (*PickUpPointCreateResult, error)
	List(ctx context.Context, in *PickUpPointListRequest, opts ...grpc.CallOption) (*PickUpPointListResult, error)
	Get(ctx context.Context, in *PickUpPointGetRequest, opts ...grpc.CallOption) (*PickUpPointGetResult, error)
	Update(ctx context.Context, in *PickUpPointUpdateRequest, opts ...grpc.CallOption) (*PickUpPointUpdateResult, error)
	Delete(ctx context.Context, in *PickUpPointDeleteRequest, opts ...grpc.CallOption) (*PickUpPointDeleteResult, error)
}

type pickUpPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPickUpPointServiceClient(cc grpc.ClientConnInterface) PickUpPointServiceClient {
	return &pickUpPointServiceClient{cc}
}

func (c *pickUpPointServiceClient) Create(ctx context.Context, in *PickUpPointCreateRequest, opts ...grpc.CallOption) (*PickUpPointCreateResult, error) {
	out := new(PickUpPointCreateResult)
	err := c.cc.Invoke(ctx, "/pickuppoint.PickUpPointService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointServiceClient) List(ctx context.Context, in *PickUpPointListRequest, opts ...grpc.CallOption) (*PickUpPointListResult, error) {
	out := new(PickUpPointListResult)
	err := c.cc.Invoke(ctx, "/pickuppoint.PickUpPointService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointServiceClient) Get(ctx context.Context, in *PickUpPointGetRequest, opts ...grpc.CallOption) (*PickUpPointGetResult, error) {
	out := new(PickUpPointGetResult)
	err := c.cc.Invoke(ctx, "/pickuppoint.PickUpPointService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointServiceClient) Update(ctx context.Context, in *PickUpPointUpdateRequest, opts ...grpc.CallOption) (*PickUpPointUpdateResult, error) {
	out := new(PickUpPointUpdateResult)
	err := c.cc.Invoke(ctx, "/pickuppoint.PickUpPointService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pickUpPointServiceClient) Delete(ctx context.Context, in *PickUpPointDeleteRequest, opts ...grpc.CallOption) (*PickUpPointDeleteResult, error) {
	out := new(PickUpPointDeleteResult)
	err := c.cc.Invoke(ctx, "/pickuppoint.PickUpPointService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PickUpPointServiceServer is the server API for PickUpPointService service.
// All implementations must embed UnimplementedPickUpPointServiceServer
// for forward compatibility
type PickUpPointServiceServer interface {
	Create(context.Context, *PickUpPointCreateRequest) (*PickUpPointCreateResult, error)
	List(context.Context, *PickUpPointListRequest) (*PickUpPointListResult, error)
	Get(context.Context, *PickUpPointGetRequest) (*PickUpPointGetResult, error)
	Update(context.Context, *PickUpPointUpdateRequest) (*PickUpPointUpdateResult, error)
	Delete(context.Context, *PickUpPointDeleteRequest) (*PickUpPointDeleteResult, error)
	mustEmbedUnimplementedPickUpPointServiceServer()
}

// UnimplementedPickUpPointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPickUpPointServiceServer struct {
}

func (UnimplementedPickUpPointServiceServer) Create(context.Context, *PickUpPointCreateRequest) (*PickUpPointCreateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPickUpPointServiceServer) List(context.Context, *PickUpPointListRequest) (*PickUpPointListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPickUpPointServiceServer) Get(context.Context, *PickUpPointGetRequest) (*PickUpPointGetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPickUpPointServiceServer) Update(context.Context, *PickUpPointUpdateRequest) (*PickUpPointUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPickUpPointServiceServer) Delete(context.Context, *PickUpPointDeleteRequest) (*PickUpPointDeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPickUpPointServiceServer) mustEmbedUnimplementedPickUpPointServiceServer() {}

// UnsafePickUpPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PickUpPointServiceServer will
// result in compilation errors.
type UnsafePickUpPointServiceServer interface {
	mustEmbedUnimplementedPickUpPointServiceServer()
}

func RegisterPickUpPointServiceServer(s grpc.ServiceRegistrar, srv PickUpPointServiceServer) {
	s.RegisterService(&PickUpPointService_ServiceDesc, srv)
}

func _PickUpPointService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pickuppoint.PickUpPointService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointServiceServer).Create(ctx, req.(*PickUpPointCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPointService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pickuppoint.PickUpPointService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointServiceServer).List(ctx, req.(*PickUpPointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPointService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pickuppoint.PickUpPointService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointServiceServer).Get(ctx, req.(*PickUpPointGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPointService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pickuppoint.PickUpPointService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointServiceServer).Update(ctx, req.(*PickUpPointUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PickUpPointService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickUpPointDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PickUpPointServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pickuppoint.PickUpPointService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PickUpPointServiceServer).Delete(ctx, req.(*PickUpPointDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PickUpPointService_ServiceDesc is the grpc.ServiceDesc for PickUpPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PickUpPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pickuppoint.PickUpPointService",
	HandlerType: (*PickUpPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PickUpPointService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PickUpPointService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PickUpPointService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PickUpPointService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PickUpPointService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pickuppoint.proto",
}
